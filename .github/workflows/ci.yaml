on:
  push:
    branches:
      - main

name: Continuous integration

env:
  BASE_IMAGE_NAME: livegrep/base
  INDEXER_IMAGE_NAME: livegrep/indexer
  NGINX_IMAGE_NAME: livegrep/nginx

jobs:
  ci:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.cache/bazel
          key: ${{runner.os}}-${{hashFiles('WORKSPACE')}}
          restore-keys: |
            ${{runner.os}}-
      - name: setup bazel
        run: |
          cat .bazelrc.ci >> .bazelrc
      - name: bazel fetch
        run: |
          bazel fetch //cmd/...
      - name: gofmt
        run: |
          gofmt=$(bazel info output_base)/external/go_sdk/bin/gofmt
          format_errors=$(find . -name '*.go' -print0 | xargs -0 "$gofmt" -l -e)
          if [ "$format_errors" ]; then
              echo "=== misformatted files (run gofmt) ==="
              echo "$format_errors"
              exit 1
          fi
      - name: bazel test, build
        run: |
          bazel test --test_arg=-test.v //...
          bazel build //...
          echo "build_output_file_name=$(./package.sh)" >> $GITHUB_ENV
      - name: upload build output
        uses: actions/upload-artifact@v2
        with: 
          name: "${{ env.build_output_file_name }}"
          path: "builds/${{ env.build_output_file_name }}.tgz"
      - name: Build images
        run: |
          docker build -t $BASE_IMAGE_NAME --file docker/base/Dockerfile --build-arg "livegrep_version=$build_output_file_name"  .
          docker build -t $INDEXER_IMAGE_NAME . --file docker/indexer/Dockerfile
          docker build -t $NGINX_IMAGE_NAME . --file docker/nginx/Dockerfile
      - name: Push images
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          BASE_IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$BASE_IMAGE_NAME
          INDEXER_IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$INDEXER_IMAGE_NAME
          NGINX_IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$NGINX_IMAGE_NAME

          # tag each image with GHCRID:VERSION
          VERSION=$(git rev-parse HEAD | head -c10)
          docker tag $BASE_IMAGE_NAME $BASE_IMAGE_ID:$VERSION
          docker tag $INDEXER_IMAGE_NAME $INDEXER_IMAGE_ID:$VERSION
          docker tag $NGINX_IMAGE_NAME $NGINX_IMAGE_ID:$VERSION

          # this workflow is running on "main" atm so always tag latest
          docker tag $BASE_IMAGE_NAME $BASE_IMAGE_ID:latest
          docker tag $INDEXER_IMAGE_NAME $INDEXER_IMAGE_ID:latest
          docker tag $NGINX_IMAGE_NAME $NGINX_IMAGE_ID:latest
          
          docker push $NGINX_IMAGE_ID:$VERSION
          docker push $BASE_IMAGE_ID:$VERSION
          docker push $INDEXER_IMAGE_ID:$VERSION

          # it seems like docker doesn't push all tags for an image, you need to
          # push each tag as if it were a seperate image -__-
          echo "Pushing latest images to test"
          docker push $NGINX_IMAGE_ID:latest
          docker push $BASE_IMAGE_ID:latest
          docker push $INDEXER_IMAGE_ID:latest
          
